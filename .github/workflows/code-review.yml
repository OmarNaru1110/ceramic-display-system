# This workflow will perform automated code review checks - FREE VERSION
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Code Review

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  code-review:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Restore dependencies
      run: dotnet restore API/API.sln

    - name: Build solution
      run: dotnet build --no-restore API/API.sln

    - name: Run .NET Code Analysis
      run: |
        dotnet build API/API.sln --configuration Release --verbosity normal --no-restore \
          -p:RunAnalyzersDuringBuild=true \
          -p:TreatWarningsAsErrors=false \
          -p:WarningsAsErrors="" \
          -p:WarningsNotAsErrors="CS8600;CS8602;CS8603;CS8604;CS8618;CS8625"

    - name: Install dotnet format tool
      run: dotnet tool install -g dotnet-format

    - name: Check code formatting
      run: |
        dotnet format API/API.sln --verify-no-changes --verbosity diagnostic
      continue-on-error: true

    - name: Run Security Analysis
      run: |
        dotnet list API/API.sln package --vulnerable --include-transitive 2>&1 | tee vulnerable-packages.txt
        if grep -q "has the following vulnerable packages" vulnerable-packages.txt; then
          echo "::warning::Vulnerable packages detected. Please review and update."
          cat vulnerable-packages.txt
        fi

    - name: Run Tests with Coverage
      run: |
        dotnet test API/API.sln \
          --no-build \
          --configuration Release \
          --logger "trx;LogFileName=test-results.trx" \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults/

    - name: Generate Coverage Summary
      run: |
        # Simple coverage summary using built-in tools
        echo "## Test Coverage Summary" >> coverage-summary.md
        find ./TestResults -name "coverage.cobertura.xml" -type f | head -1 | while read file; do
          if [ -f "$file" ]; then
            coverage=$(grep -o 'line-rate="[^"]*"' "$file" | head -1 | sed 's/line-rate="//;s/"//' | awk '{printf "%.1f%%", $1*100}')
            echo "Coverage: $coverage" >> coverage-summary.md
          else
            echo "Coverage: Report not found" >> coverage-summary.md
          fi
        done

    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: .NET Tests
        path: ./TestResults/*.trx
        reporter: dotnet-trx

    - name: Comment PR with Code Review Summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## ?? Automated Code Review Summary\n\n';
          
          // Check if vulnerable packages file exists
          if (fs.existsSync('vulnerable-packages.txt')) {
            const vulnerablePackages = fs.readFileSync('vulnerable-packages.txt', 'utf8');
            if (vulnerablePackages.includes('has the following vulnerable packages')) {
              comment += '?? **Security Alert**: Vulnerable packages detected. Please review and update.\n\n';
            } else {
              comment += '? **Security**: No vulnerable packages detected.\n\n';
            }
          }
          
          // Add coverage summary if available
          if (fs.existsSync('coverage-summary.md')) {
            const coverageSummary = fs.readFileSync('coverage-summary.md', 'utf8');
            comment += coverageSummary + '\n\n';
          }
          
          comment += '### Code Quality Checks\n';
          comment += '- ? Build successful\n';
          comment += '- ? Tests executed\n';
          comment += '- ? Code analysis completed\n';
          comment += '- ? Security scan completed\n';
          comment += '- ? Code formatting checked\n\n';
          
          comment += '### Next Steps\n';
          comment += '1. Review any warnings or suggestions above\n';
          comment += '2. Ensure all tests are passing\n';
          comment += '3. Check code coverage reports\n';
          comment += '4. Address any security vulnerabilities\n';
          comment += '5. Fix any code formatting issues\n\n';
          
          comment += '*This is an automated code review. Please review the detailed logs for more information.*';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        deny-licenses: GPL-2.0, GPL-3.0